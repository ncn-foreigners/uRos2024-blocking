"0","unicode_encoding_used = 'utf-8'"
"0","rec_id_attr_name = 'rec-id'"
"0","num_org_rec = 10000"
"0","num_dup_rec = 5000"
"0",""
"0","max_duplicate_per_record = 4"
"0","num_duplicates_distribution = 'zipf'"
"0",""
"0","max_modification_per_attr = 1"
"0","num_modification_per_record = 4"
"0",""
"0","basefunctions.check_unicode_encoding_exists(unicode_encoding_used)"
"0",""
"0","def generate_id_num():"
"0","    """""""
"0","    Generate a valid Polish ID number (numer dowodu osobistego)."
"0","    Format: ABC123456"
"0","    - First three characters are uppercase letters (except B, I, O, Q, U, V)"
"0","    - Followed by 5 digits"
"0","    - Last character is a checksum digit"
"0","    """""""
"0","    valid_letters = [c for c in string.ascii_uppercase if c not in 'BIOQVU']"
"0","    letters = ''.join(random.choices(valid_letters, k=3))"
"0","    digits = ''.join(random.choices(string.digits, k=5))"
"0","    "
"0","    # Calculate checksum"
"0","    # Convert letters to numbers (A=10, B=11, etc.) and multiply by weights"
"0","    weights = [7, 3, 1, 9, 7, 3, 1, 7, 3]"
"0","    values = []"
"0","    "
"0","    # Process letters"
"0","    for letter in letters:"
"0","        values.append(ord(letter) - ord('A') + 10)"
"0","        "
"0","    # Process digits"
"0","    for digit in digits:"
"0","        values.append(int(digit))"
"0","        "
"0","    # Calculate checksum"
"0","    checksum = sum(w * v for w, v in zip(weights, values)) % 10"
"0","    "
"0","    # Combine all parts"
"0","    id_number = f""{letters}{digits}{checksum}"""
"0","    "
"0","    return id_number"
"0","    "
"0","given_name_attr = generator.GenerateFreqAttribute("
"0","    attribute_name = 'first_name', # Nazwa kolumny, potrzebna później"
"0","    freq_file_name = '../data/first_name.csv', # Ścieżka do pliku csv"
"0","    has_header_line = True, # Czy pilk csv ma nagłówek"
"0","    unicode_encoding = unicode_encoding_used # Kodowanie"
"0",")"
"0",""
"0","second_name_attr = generator.GenerateFreqAttribute("
"0","    attribute_name = 'second_name',"
"0","    freq_file_name = '../data/second_name.csv',"
"0","    has_header_line = True,"
"0","    unicode_encoding = unicode_encoding_used"
"0",")"
"0",""
"0","last_name_attr = generator.GenerateFreqAttribute("
"0","    attribute_name = 'last_name',"
"0","    freq_file_name = '../data/last_name.csv',"
"0","    has_header_line = True,"
"0","    unicode_encoding = unicode_encoding_used"
"0",")"
"0",""
"0","wojewodztwo_attr = generator.GenerateFreqAttribute("
"0","    attribute_name = 'region',"
"0","    freq_file_name = '../data/pop_regions.csv',"
"0","    has_header_line = True,"
"0","    unicode_encoding = unicode_encoding_used"
"0",")"
"0",""
"0","birthdate_attr = generator.GenerateFuncAttribute("
"0","    attribute_name = 'birth_date',"
"0","    #Parametry do funkcji generowania dat urodzenia:"
"0","    #mode_age : int : mode age in a population, used for triangular distribution, must be less than 100"
"0","    #distribution : String : distribution from which birthyears will be generated."
"0","        #Options -> [""normal"", ""triangular"", ""uniform""]"
"0","    #year_only : bool : decide if function should retrun birthyear or birthdate."
"0","    #format : String : format in which birthdate should be generated. Options -> [""MM/DD/YYYY"", ""DD/MM/YYYY"", ""YYYY/MM/DD""]"
"0","    function = attrgenfunct.generate_birthdate,"
"0","    parameters = [45, ""triangular"", False, ""DD/MM/YYYY""]"
"0",")"
"0",""
"0",""
"0","number_id_attr = generator.GenerateFuncAttribute("
"0","    attribute_name = 'personal_id',"
"0","    function = generate_id_num,"
"0",")"
"0",""
"0","edit_corruptor = corruptor.CorruptValueEdit("
"0","          position_function = corruptor.position_mod_normal,"
"0","          char_set_funct = basefunctions.char_set_ascii,"
"0","          insert_prob = 0.5,"
"0","          delete_prob = 0.5,"
"0","          substitute_prob = 0.0,"
"0","          transpose_prob = 0.0"
"0","          # muszą się sumować do 1"
"0",")"
"0",""
"0","edit_corruptor2 = corruptor.CorruptValueEdit("
"0","          position_function = corruptor.position_mod_uniform,"
"0","          char_set_funct = basefunctions.char_set_ascii,"
"0","          insert_prob = 0.25,"
"0","          delete_prob = 0.25,"
"0","          substitute_prob = 0.25,"
"0","          transpose_prob = 0.25"
"0",")"
"0",""
"0","edit_corruptor3 = corruptor.CorruptValueEdit("
"0","          position_function = corruptor.position_mod_normal,"
"0","          char_set_funct = basefunctions.char_set_ascii,"
"0","          insert_prob = 0.0,"
"0","          delete_prob = 0.5,"
"0","          substitute_prob = 0.5,"
"0","          transpose_prob = 0.0"
"0","          # muszą się sumować do 1"
"0",")"
"0",""
"0","ocr_corruptor = corruptor.CorruptValueOCR("
"0","          position_function = corruptor.position_mod_normal,"
"0","          lookup_file_name = '../data/ocr_var.csv',"
"0","          has_header_line = True,"
"0","          unicode_encoding = unicode_encoding_used"
"0",")"
"0",""
"0","keyboard_corruptor = corruptor.CorruptValueKeyboard("
"0","          position_function = corruptor.position_mod_normal,"
"0","          row_prob = 0.5,"
"0","          col_prob = 0.5"
"0",")"
"0",""
"0","phonetic_corruptor = corruptor.CorruptValuePhonetic("
"0","          lookup_file_name = '../data/phonetic_var.csv',"
"0","          has_header_line = True,"
"0","          unicode_encoding = unicode_encoding_used"
"0",")"
"0",""
"0","missing_val_corruptor = corruptor.CorruptMissingValue()"
"0",""
"0","missing_val_corruptor_2 = corruptor.CorruptMissingValue("
"0","       missing_val='puste'"
"0",")"
"0",""
"0","birthday_year_corruptor = corruptor.CorruptBirthYear(date_format=""DD/MM/YYYY"")"
"0",""
"0","polish_letters_corruptor = CorruptPolishLetters()"
"0",""
"0",""
"0","attr_name_list = ['first_name', 'second_name', 'last_name', 'region', 'birth_date', 'personal_id']"
"0",""
"0","attr_data_list = [given_name_attr, second_name_attr, last_name_attr, wojewodztwo_attr, birthdate_attr, number_id_attr]"
"0",""
"0","test_data_generator = generator.GenerateDataSet("
"0","                        output_file_name = ""../data-sim/dummy_path.csv"","
"0","                        write_header_line = True,"
"0","                        rec_id_attr_name = rec_id_attr_name,"
"0","                        number_of_records = num_org_rec,"
"0","                        attribute_name_list = attr_name_list,"
"0","                        attribute_data_list = attr_data_list,"
"0","                        unicode_encoding = unicode_encoding_used"
"0","                        )"
"0",""
"0",""
"0","attr_mod_prob_dictionary = {"
"0","    'first_name': 0.3,"
"0","    'second_name': 0.15,"
"0","    'last_name': 0.2,"
"0","    'region': 0.05,"
"0","    'birth_date': 0.1,"
"0","    'personal_id': 0.2"
"0","}"
"0",""
"0",""
"0","attr_mod_data_dictionary = {"
"0","    'first_name': [(0.8, polish_letters_corruptor), (0.2, missing_val_corruptor)],"
"0","    'second_name': [(0.8, polish_letters_corruptor), (0.2, keyboard_corruptor)],"
"0","    'last_name': [(0.8, polish_letters_corruptor), (0.2, missing_val_corruptor_2)],"
"0","    'region': [(1.0, missing_val_corruptor)],"
"0","    'birth_date': [(0.5, birthday_year_corruptor), (0.5, missing_val_corruptor)],"
"0","    'personal_id': [(0.4, keyboard_corruptor), (0.4, phonetic_corruptor), (0.2, missing_val_corruptor)]"
"0","}"
"0",""
"0",""
"0","test_data_corruptor = corruptor.CorruptDataSet(number_of_org_records = num_org_rec,"
"0","                                                number_of_mod_records = num_dup_rec,"
"0","                                                attribute_name_list = attr_name_list,"
"0","                                                max_num_dup_per_rec = max_duplicate_per_record,"
"0","                                                num_dup_dist = num_duplicates_distribution,"
"0","                                                max_num_mod_per_attr = max_modification_per_attr,"
"0","                                                num_mod_per_rec = num_modification_per_record,"
"0","                                                attr_mod_prob_dict = attr_mod_prob_dictionary,"
"0","                                                attr_mod_data_dict = attr_mod_data_dictionary)"
"1","Probability distribution for number of duplicates per record:
[(1, 0.0), (2, 0.35913644272764145), (3, 0.6130842567515709), (4, 0.8204317786361792)]
"
